import t from"object-hash";const e=(t,e)=>{let o=e;for(const e of t)o=o[e];return o};var o=Object.defineProperty,n=Object.getOwnPropertySymbols,r=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable,c=(t,e,n)=>e in t?o(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n;const l=(o,n)=>{var r;const i=Object.entries(n).filter((t=>"object"==typeof t[1])).map((t=>t[0])),c=Object.fromEntries(Object.entries(o).filter((t=>!i.includes(t[0])))),s={};for(const[i,a]of Object.entries(n)){if("id"===i&&"string"==typeof a){const t=a.split(".");s[i]=null!=(r=e(t,o))?r:a}"hash"===i&&a&&(s[i]=t(c)),"object"==typeof a&&a.parentHash&&(s[`${i}Hash`]=t(o[i])),Array.isArray(o[i])&&"object"==typeof a&&(s[i]=o[i].map((t=>l(t,a))))}return s},s=(t,e)=>{var o,n;let r={id:t.id,action:"none"};t&&!e&&(r={action:"create",id:t.id}),(null==t?void 0:t.hash)!==(null==e?void 0:e.hash)&&void 0!==(null==e?void 0:e.hash)&&(r={action:"update",id:t.id});const i=Object.entries(t);for(const[c,l]of i){if(!Array.isArray(l))continue;const i=`${c.toString()}Hash`;if(t[i]===(null==e?void 0:e[i])&&void 0!==t[i])continue;void 0===r[c]&&(r[c]=[]);const a=null==(o=null==e?void 0:e[c])?void 0:o.map((t=>t.id)),d=null==(n=null==t?void 0:t[c])?void 0:n.map((t=>t.id));for(const t of null!=a?a:[])(null==d?void 0:d.includes(t))||r[c].push({action:"delete",id:t});const f=null==l?void 0:l.map((t=>{var o;const n=null==(o=null==e?void 0:e[c])?void 0:o.find((e=>e.id===t.id));return s(t,n)}));r[c]=[...r[c],...f]}return r},a=(t,e,o)=>{const l=Object.entries(o).filter((t=>"object"==typeof t[1])).map((t=>t[0])),s=Object.fromEntries(Object.entries(t).filter((t=>!l.includes(t[0])))),d=((t,e)=>{for(var o in e||(e={}))r.call(e,o)&&c(t,o,e[o]);if(n)for(var o of n(e))i.call(e,o)&&c(t,o,e[o]);return t})({},e);"none"!==e.action&&(d.data=s);for(const[n,r]of Object.entries(e)){if(!Array.isArray(r))continue;const e=n,i=o[e];if(!i)continue;const c=r.map((o=>{const n=t[e].find((t=>t[i.id]===o.id));return n?a(n,o,i):o}));d[e]=c}return d};export{s as compareHashes,l as createHash,a as getDataFromCompare};
//# sourceMappingURL=bundle.esm.js.map
