{"version":3,"file":"bundle.cjs.js","sources":["../src/utils/common.utils.ts","../src/functions/hash.ts"],"sourcesContent":["export const accessObjectDepp = (\n  keys: string[],\n  object: Record<string, any>\n) => {\n  let aux = object;\n  for (const key of keys) {\n    aux = aux[key];\n  }\n  return aux;\n};\n\nexport const isObjectEmpty = (obj: object) => {\n  return Object.keys(obj).length === 0;\n};\n","import hash from \"object-hash\";\nimport { Hash, HashCompareResponse } from \"../types/hash.types.ts\";\nimport { HashResponse, HashSchema } from \"../types/hash.types.ts\";\nimport { accessObjectDepp } from \"../utils/common.utils.ts\";\n\n/**\n * Creates a hash object based on the provided target and schema.\n * @param target - The target object to create a hash for.\n * @param schema - The schema object that defines the hash structure.\n * @returns The hash object.\n */\nexport const createHash = <T extends Record<string, any>>(\n  target: T,\n  schema: HashSchema<T>\n) => {\n  const schemaKeys = Object.entries(schema)\n    .filter(entry => typeof entry[1] === \"object\")\n    .map(entry => entry[0]);\n\n  const content = Object.fromEntries(\n    Object.entries(target).filter(entry => !schemaKeys.includes(entry[0]))\n  );\n\n  const response: any = {};\n  for (const [key, value] of Object.entries(schema)) {\n    if (key === \"id\" && typeof value === \"string\") {\n      const ids = value.split(\".\");\n      response[key] = accessObjectDepp(ids, target) ?? value;\n    }\n\n    if (key === \"hash\" && value) {\n      response[key] = hash(content);\n    }\n\n    if (typeof value === \"object\" && value[\"parentHash\"]) {\n      response[`${key}Hash`] = hash(target[key]);\n    }\n    if (Array.isArray(target[key]) && typeof value === \"object\") {\n      response[key] = target[key].map((item: object) =>\n        createHash(item, value)\n      );\n    }\n  }\n  return response as Hash<HashSchema<T>>;\n};\n\n/**\n * Compares two hashes and returns a response indicating the differences.\n * @param actualHash The current hash object.\n * @param oldHash The previous hash object.\n * @returns A response object indicating the differences between the two hashes.\n */\nexport const compareHashes = <T extends object>(\n  actualHash: Hash<T>,\n  oldHash: Hash<T> | undefined | null\n): HashCompareResponse<Hash<T>> => {\n  let response: any = { id: actualHash.id, action: \"none\" };\n  if (actualHash && !oldHash) {\n    response = { action: \"create\", id: actualHash.id };\n  }\n\n  if (\n    actualHash?.hash !== oldHash?.hash &&\n    typeof oldHash?.hash !== \"undefined\"\n  ) {\n    response = { action: \"update\", id: actualHash.id };\n  }\n  const entries = Object.entries(actualHash) as [\n    keyof Hash<T>,\n    string | Array<Hash<T>>\n  ][];\n  for (const [key, value] of entries) {\n    if (!Array.isArray(value)) continue;\n    const hashKey = `${key.toString()}Hash` as keyof Hash<T>;\n    if (\n      actualHash[hashKey] === oldHash?.[hashKey] &&\n      typeof actualHash[hashKey] !== \"undefined\"\n    ) {\n      continue;\n    }\n    if (typeof response[key] === \"undefined\") {\n      response[key] = [];\n    }\n\n    const previousIds = oldHash?.[key]?.map(oldItem => oldItem.id);\n    const actualIds = actualHash?.[key]?.map(actualItem => actualItem.id);\n\n    for (const previousId of previousIds ?? []) {\n      if (actualIds?.includes(previousId)) continue;\n      response[key].push({\n        action: \"delete\",\n        id: previousId\n      });\n    }\n\n    const childHashes = value?.map(actualItemHash => {\n      const previousItemHash = (oldHash?.[key] as Hash<T>[])?.find(\n        oldItem => oldItem.id === actualItemHash.id\n      );\n      return compareHashes(actualItemHash, previousItemHash);\n    });\n\n    response[key] = [...response[key], ...childHashes];\n  }\n  return response;\n};\n\n/**\n * Retrieves data from the compare operation based on the provided schema.\n * @template T - The type of the data object.\n * @param {T} data - The data object.\n * @param {HashCompareResponse<Hash<HashSchema<T>>>} hashResponse - The hash compare response.\n * @param {HashSchema<T>} schema - The schema object.\n * @returns {HashResponse<Hash<HashSchema<T>>>} - The response object containing the data based on the schema.\n */\nexport const getDataFromCompare = <T extends Record<string, any>>(\n  data: T,\n  hashResponse: HashCompareResponse<Hash<HashSchema<T>>>,\n  schema: HashSchema<T>\n) => {\n  const schemaKeys = Object.entries(schema)\n    .filter(entry => typeof entry[1] === \"object\")\n    .map(entry => entry[0]);\n\n  const content = Object.fromEntries(\n    Object.entries(data).filter(entry => !schemaKeys.includes(entry[0]))\n  );\n  const response: any = { ...hashResponse };\n\n  if (hashResponse.action !== \"none\") response[\"data\"] = content;\n  for (const [key, value] of Object.entries(hashResponse)) {\n    if (!Array.isArray(value)) continue;\n    const typedKey = key as keyof HashSchema<T>;\n    const selectedSchema = schema[typedKey];\n    if (!selectedSchema) continue;\n    const newValue = value.map(item => {\n      const dataItem = data[typedKey].find(\n        (dataItem: any) => dataItem[selectedSchema.id] === item.id\n      );\n      if (!dataItem) return item;\n      return getDataFromCompare(dataItem, item, selectedSchema);\n    });\n    response[typedKey] = newValue;\n  }\n  return response as HashResponse<Hash<HashSchema<T>>>;\n};\n"],"names":["accessObjectDepp","keys","object","aux","key","createHash","target","schema","_a","schemaKeys","Object","entries","filter","entry","map","content","fromEntries","includes","response","value","ids","split","hash","Array","isArray","item","compareHashes","actualHash","oldHash","_b","id","action","hashKey","toString","previousIds","oldItem","actualIds","actualItem","previousId","push","childHashes","actualItemHash","previousItemHash","find","getDataFromCompare","data","hashResponse","__spreadValues","typedKey","selectedSchema","newValue","dataItem"],"mappings":"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"}