{"version":3,"file":"bundle.esm.js","sources":["../src/utils/common.utils.ts","../src/functions/hash.ts"],"sourcesContent":["export const accessObjectDepp = (\n  keys: string[],\n  object: Record<string, any>\n) => {\n  let aux = object;\n  for (const key of keys) {\n    aux = aux[key];\n  }\n  return aux;\n};\n\nexport const isObjectEmpty = (obj: object) => {\n  return Object.keys(obj).length === 0;\n};\n","import hash from \"object-hash\";\nimport { Hash, HashCompareResponse } from \"../types/hash.types.ts\";\nimport { HashResponse, HashSchema } from \"../types/hash.types.ts\";\nimport { accessObjectDepp } from \"../utils/common.utils.ts\";\n\n/**\n * Creates a hash object based on the provided target and schema.\n * @param target - The target object to create a hash for.\n * @param schema - The schema object that defines the hash structure.\n * @returns The hash object.\n */\nexport const createHash = <T extends Record<string, any>>(\n  target: T,\n  schema: HashSchema<T>\n) => {\n  const schemaKeys = Object.entries(schema)\n    .filter(entry => typeof entry[1] === \"object\")\n    .map(entry => entry[0]);\n\n  const content = Object.fromEntries(\n    Object.entries(target).filter(entry => !schemaKeys.includes(entry[0]))\n  );\n\n  const response: any = {};\n  for (const [key, value] of Object.entries(schema)) {\n    if (key === \"id\" && typeof value === \"string\") {\n      const ids = value.split(\".\");\n      response[key] = accessObjectDepp(ids, target) ?? value;\n    }\n\n    if (key === \"hash\" && value) {\n      response[key] = hash(content);\n    }\n\n    if (typeof value === \"object\" && value[\"parentHash\"]) {\n      response[`${key}Hash`] = hash(target[key]);\n    }\n    if (Array.isArray(target[key]) && typeof value === \"object\") {\n      response[key] = target[key].map((item: object) =>\n        createHash(item, value)\n      );\n    }\n  }\n  return response as Hash<HashSchema<T>>;\n};\n\n/**\n * Compares two hashes and returns a response indicating the differences.\n * @param actualHash The current hash object.\n * @param oldHash The previous hash object.\n * @returns A response object indicating the differences between the two hashes.\n */\nexport const compareHashes = <T extends object>(\n  actualHash: Hash<T>,\n  oldHash: Hash<T> | undefined | null\n): HashCompareResponse<Hash<T>> => {\n  let response: any = { id: actualHash.id, action: \"none\" };\n  if (actualHash && !oldHash) {\n    response = { action: \"create\", id: actualHash.id };\n  }\n\n  if (\n    actualHash?.hash !== oldHash?.hash &&\n    typeof oldHash?.hash !== \"undefined\"\n  ) {\n    response = { action: \"update\", id: actualHash.id };\n  }\n  const entries = Object.entries(actualHash) as [\n    keyof Hash<T>,\n    string | Array<Hash<T>>\n  ][];\n  for (const [key, value] of entries) {\n    if (!Array.isArray(value)) continue;\n    const hashKey = `${key.toString()}Hash` as keyof Hash<T>;\n    if (\n      actualHash[hashKey] === oldHash?.[hashKey] &&\n      typeof actualHash[hashKey] !== \"undefined\"\n    ) {\n      continue;\n    }\n    if (typeof response[key] === \"undefined\") {\n      response[key] = [];\n    }\n\n    const previousIds = oldHash?.[key]?.map(oldItem => oldItem.id);\n    const actualIds = actualHash?.[key]?.map(actualItem => actualItem.id);\n\n    for (const previousId of previousIds ?? []) {\n      if (actualIds?.includes(previousId)) continue;\n      response[key].push({\n        action: \"delete\",\n        id: previousId\n      });\n    }\n\n    const childHashes = value?.map(actualItemHash => {\n      const previousItemHash = (oldHash?.[key] as Hash<T>[])?.find(\n        oldItem => oldItem.id === actualItemHash.id\n      );\n      return compareHashes(actualItemHash, previousItemHash);\n    });\n\n    response[key] = [...response[key], ...childHashes];\n  }\n  return response;\n};\n\n/**\n * Retrieves data from the compare operation based on the provided schema.\n * @template T - The type of the data object.\n * @param {T} data - The data object.\n * @param {HashCompareResponse<Hash<HashSchema<T>>>} hashResponse - The hash compare response.\n * @param {HashSchema<T>} schema - The schema object.\n * @returns {HashResponse<Hash<HashSchema<T>>>} - The response object containing the data based on the schema.\n */\nexport const getDataFromCompare = <T extends Record<string, any>>(\n  data: T,\n  hashResponse: HashCompareResponse<Hash<HashSchema<T>>>,\n  schema: HashSchema<T>\n) => {\n  const schemaKeys = Object.entries(schema)\n    .filter(entry => typeof entry[1] === \"object\")\n    .map(entry => entry[0]);\n\n  const content = Object.fromEntries(\n    Object.entries(data).filter(entry => !schemaKeys.includes(entry[0]))\n  );\n  const response: any = { ...hashResponse };\n\n  if (hashResponse.action !== \"none\") response[\"data\"] = content;\n  for (const [key, value] of Object.entries(hashResponse)) {\n    if (!Array.isArray(value)) continue;\n    const typedKey = key as keyof HashSchema<T>;\n    const selectedSchema = schema[typedKey];\n    if (!selectedSchema) continue;\n    const newValue = value.map(item => {\n      const dataItem = data[typedKey].find(\n        (dataItem: any) => dataItem[selectedSchema.id] === item.id\n      );\n      if (!dataItem) return item;\n      return getDataFromCompare(dataItem, item, selectedSchema);\n    });\n    response[typedKey] = newValue;\n  }\n  return response as HashResponse<Hash<HashSchema<T>>>;\n};\n"],"names":["_a","dataItem"],"mappings":"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"}